* DOCT: Declarative Org Capture Templates
~doct~ is a function that provides an alternative, declarative syntax for describing Org capture templates.

** tl;dr
#+begin_src emacs-lisp
'(("p" "Parent")
  ("pc" "Child" entry (file+headline "~/example.org" "Example")
   "* %^{Description} \n:PROPERTIES:\n:Created: %U\n:END:%?"
   :prepend t))
#+end_src

becomes:

#+begin_src emacs-lisp
(doct '(("Parent" :keys "p"
         :children ("Child" :keys "c"
                    :file "~/example.org"
                    :headline "Example"
                    :prepend t
                    :template ("* %^{Description}"
                               ":PROPERTIES:"
                               ":Created: %U"
                               ":END:"
                               "%?")))))
#+end_src

** TODO Installation
;;TODO
** TODO Documentation
#+begin_src emacs-lisp
(doct declarations)
#+end_src

~doct~ expects a list of declarations. Each declaration is either a parent, or child template declaration.
A parent declaration consists of:

- a name
- a ~:keys~ string
- a list of ~:children~

A child declaration consists of:

- a name
- a ~:keys~ string
- a template type
- a target
- an item template
- hook functions defined with the hook keywords
- additional arguments

*** Name & Keys
Each declaration must define, at a minimum, a name and keys. The name is the first
value in the declaration. The ~:keys~ keyword defines the keys to access the template
from the capture menu.

#+begin_src emacs-lisp
(doct '(("example" :keys "e")))
#+end_src

returns:

#+begin_src emacs-lisp
(("e" "example"))
#+end_src

*** Type

The ~:type~ keyword defines the entry type and accepts the following symbols:

- entry ::
  An Org node with a headline. The template becomes a child of the target entry
  or a top level entry.

- item ::
  A plain list item, placed in the first plain list at the target location.

- checkitem ::
  A checkbox item. This differs from the plain list item only in so far as it
  uses a different default template.

- table-line ::
  A new line in the first table at target location.
- plain ::
  Text inserted as is.

~doct-default-entry-type~ defines the entry type when the ~:type~ keyword is not provided.

For example, with  ~doct-default-entry-type~ set to ~entry~ (the default):

#+begin_src emacs-lisp
(doct '(("example"
         :keys "e"
         :type entry
         :file "")))
#+end_src

And

#+begin_src emacs-lisp
(doct '(("example"
         :keys "e"
         :file "")))
#+end_src

Both return:

#+begin_src emacs-lisp
(("e" "example" entry (file "")))
#+end_src

*** Target
The ~:target~ keyword defines the location of the inserted template text.

#+begin_src emacs-lisp
(doct ... :target (file "/path/to/target.org"))
#+end_src

The first keyword declared in the following group exclusively sets the target.
The ~:file~ keyword is not necessary for these.

- :id "id of existing Org entry" ::
  File as child of this entry, or in the body of the entry
  (see [[https://github.com/emacs-mirror/emacs/blob/d0e2a341dd9a9a365fd311748df024ecb25b70ec/lisp/org/org-id.el#L45][org-id-get-create]] and the [[https://orgmode.org/manual/Template-elements.html#Template-elements][Org Mode Manual]])

- :clock t ::
  File to the currently clocked entry

- :function (lambda () ;visit file and move point to desired location...) ::
  This keyword is exclusive when used without the ~:file~ keyword. It is
  responsible for finding the proper file and location to insert the capture
  item. If ~:file~ defines a target file, then the function is only
  responsible for moving point to the desired location within that file.


#+begin_src emacs-lisp
(doct '(("example"
         :keys "e"
         :type entry
         :clock t
         ;;ignored because clock is first
         :function (lambda () (ignore))
         ;;also ignored
         :id "1")))
#+end_src

returns:

#+begin_src emacs-lisp
(("e" "example" entry (clock)))
#+end_src

The ~:file~ keyword defines the target file for the capture template.

#+begin_src emacs-lisp
(doct ... :file "/path/to/target.org")
#+end_src

The following keywords refine the target file location:

- :headline "node headline" ::
  File under unique heading in target file.

- :olp ("Level 1 heading" "Level 2 heading"...) ::

  Define the full outline in the target file.
  If ~:+datetree~ has a non-nil value, create a date tree for todayâ€™s date.
  Use a non-nil ~:time-prompt~ property to prompt for a different date.
  Use a non-nil ~:tree-type~ property to create a week-tree.

- :regexp "regexp describing location" ::

  File to the entry matching regexp in target file

- :function location-finding-function ::

  If used in addition to the ~:file~ keyword, the value should be a function
  that finds the desired location in that file. If used as an exclusive
  keyword (see above), the function must locate both the target file and move
  point to the desired location.

*** Template
The ~:template~ keyword defines the template for creating the capture item.
It may be either a string or a list of strings. ~doct~ joins the list with new lines.

#+begin_src emacs-lisp
(doct '((... :template ("Test" "One" "Two"))))
#+end_src

returns:

#+begin_src emacs-lisp
((... "Test\nOne\nTwo"))
#+end_src

The ~:template-file:~ keyword defines a file containing the text of the template.
The ~:template-function:~ keyword defines a function which returns the template.

The first of these keywords found overrides any additional template declarations.

*** Additional options
Key Value pairs define additional options.
~doct~ does not include keywords with a ~nil~ value in the expansion.

#+begin_src emacs-lisp
(doct '((...:immediate-finish nil)))
#+end_src

returns:

#+begin_src emacs-lisp
((...))
#+end_src

see the [[https://orgmode.org/manual/Template-elements.html#Template-elements][Org Mode Manual]] for a full list of additional options.

*** Children
A parent declaration may contain a list of ~:children~ declarations.
The parent's ~:keys~ prefix each child's ~:keys~.

#+begin_src emacs-lisp
(doct '(("parent" :keys "p"
         :children
         (("child" :keys "c"
           :children
           (("grandchild" :keys "g"
             :file ""
             :type plain
             :template "test")))))))
#+end_src

returns:

#+begin_src emacs-lisp
(("p" "parent") ("pc" "child") ("pcg" "grandchild" plain (file "") "test"))
#+end_src

*** Hooks
Adding one of the following hook keywords in an entry will generate a function
of the form:

=doct--hook/<hook-variable-abbreviation>/KEYS=

which wraps the user's function in a conditional check for the current
template's keys and adds it to the appropriate hook.

- :hook ::
  - org-capture-mode-hook ::

    Runs when entering the org-capture-mode minor mode. Useful for running a
    function immediately after filling the template out.

- :prepare-finalize  ::
  - org-capture-prepare-finalize-hook ::

    Runs before the finalization starts. The capture buffer is current and
    narrowed.

- :before-finalize ::
  - org-capture-before-finalize-hook ::

    Runs right before a capture process finalizes. The capture buffer is still
    current and widened to the entire buffer.

- :after-finalize ::
  - org-capture-after-finalize-hook  ::
    Runs right after a capture process finalizes. Suitable for window cleanup.

For example:

#+begin_src emacs-lisp
(doct '(("example"
         :keys "e"
         :hook (lambda ()
                 ;;executed when selecting the "example" template
                 ;;during the org-capture-mode-hook.
                 (ignore)))))
#+end_src

See =doct-remove-hooks= to remove and unintern generated functions.
